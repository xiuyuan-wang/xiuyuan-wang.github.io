(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{304:function(n,a,e){"use strict";e.r(a);var t=e(14),s=Object(t.a)({},(function(){var n=this,a=n._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("p",[n._v("ES6 使用手册\n")]),n._v(" "),a("h5",{attrs:{id:"_1-let-和-const"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-let-和-const"}},[n._v("#")]),n._v(" 1. let 和 const")]),n._v(" "),a("p",[n._v("在我们开发的时候，可能认为应该默认使用 let 而不是 var，这种情况下，对于需要写保护的变量要使用 const。")]),n._v(" "),a("p",[n._v("然而另一种做法日益普及：默认使用 const，只有当确实需要改变变量的值的时候才使用 let。这是因为大部分的变量的值在初始化后不应再改变，而预料之外的变量的修改是很多 bug 的源头。")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("  // 例子 1-1\n\n  // bad\n  var foo = 'bar';\n\n  // good\n  let foo = 'bar';\n\n  // better\n  const foo = 'bar';\n")])])]),a("h5",{attrs:{id:"_2-模板字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-模板字符串"}},[n._v("#")]),n._v(" 2. 模板字符串")]),n._v(" "),a("h6",{attrs:{id:"需要拼接字符串的时候尽量改成使用模板字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#需要拼接字符串的时候尽量改成使用模板字符串"}},[n._v("#")]),n._v(" 需要拼接字符串的时候尽量改成使用模板字符串:")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("// 例子 2-1\n// bad\nconst foo = 'this is a' + example;\n// good\nconst foo = `this is a ${example}`;\n")])])]),a("h6",{attrs:{id:"_2-标签模板"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-标签模板"}},[n._v("#")]),n._v(" 2. 标签模板")]),n._v(" "),a("p",[n._v("可以借助标签模板优化书写方式:")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("let url = oneLine `\n    www.taobao.com/example/index.html\n    ?foo=${foo}\n    &bar=${bar}\n`;\nconsole.log(url); // www.taobao.com/example/index.html?foo=foo&bar=bar\n")])])]),a("p",[n._v("oneLine 的源码可以参考 《ES6 系列之模板字符串》")]),n._v(" "),a("h5",{attrs:{id:"_3-箭头函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-箭头函数"}},[n._v("#")]),n._v(" 3. 箭头函数")]),n._v(" "),a("p",[n._v("优先使用箭头函数，不过以下几种情况避免使用：")]),n._v(" "),a("h6",{attrs:{id:"_1-使用箭头函数定义对象的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-使用箭头函数定义对象的方法"}},[n._v("#")]),n._v(" 1. 使用箭头函数定义对象的方法")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("// 例子 3-1\n\n// bad\nlet foo = {\n  value: 1,\n  getValue: () => console.log(this.value)\n}\n\nfoo.getValue();  // undefined\n")])])]),a("h6",{attrs:{id:"_2-定义原型方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-定义原型方法"}},[n._v("#")]),n._v(" 2. 定义原型方法")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("// 例子 3-2\n\n// bad\nfunction Foo() {\n  this.value = 1\n}\n\nFoo.prototype.getValue = () => console.log(this.value)\n\nlet foo = new Foo()\nfoo.getValue();  // undefined\n")])])]),a("h6",{attrs:{id:"_3-作为事件的回调函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-作为事件的回调函数"}},[n._v("#")]),n._v(" 3. 作为事件的回调函数")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("// 例子 3-3\n\n// bad\nconst button = document.getElementById('myButton');\nbutton.addEventListener('click', () => {\n    console.log(this === window); // => true\n    this.innerHTML = 'Clicked button';\n});\n")])])]),a("h5",{attrs:{id:"_4-symbol"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-symbol"}},[n._v("#")]),n._v(" 4. Symbol")]),n._v(" "),a("h6",{attrs:{id:"_1-唯一值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-唯一值"}},[n._v("#")]),n._v(" 1. 唯一值")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v('// 例子 4-1\n// bad\n// 1. 创建的属性会被 for-in 或 Object.keys() 枚举出来\n// 2. 一些库可能在将来会使用同样的方式，这会与你的代码发生冲突\nif (element.isMoving) {\n  smoothAnimations(element);\n}\nelement.isMoving = true;\n\n// good\nif (element.__$jorendorff_animation_library$PLEASE_DO_NOT_USE_THIS_PROPERTY$isMoving__) {\n  smoothAnimations(element);\n}\nelement.__$jorendorff_animation_library$PLEASE_DO_NOT_USE_THIS_PROPERTY$isMoving__ = true;\n\n// better\nvar isMoving = Symbol("isMoving");\n\n...\n\nif (element[isMoving]) {\n  smoothAnimations(element);\n}\nelement[isMoving] = true;\n')])])]),a("h6",{attrs:{id:"_2-魔术字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-魔术字符串"}},[n._v("#")]),n._v(" 2. 魔术字符串")]),n._v(" "),a("p",[n._v("魔术字符串指的是在代码之中多次出现、与代码形成强耦合的某一个具体的字符串或者数值。")]),n._v(" "),a("p",[n._v("魔术字符串不利于修改和维护，风格良好的代码，应该尽量消除魔术字符串，改由含义清晰的变量代替。")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("// 例子 4-1\n\n// bad\nconst TYPE_AUDIO = 'AUDIO'\nconst TYPE_VIDEO = 'VIDEO'\nconst TYPE_IMAGE = 'IMAGE'\n\n// good\nconst TYPE_AUDIO = Symbol()\nconst TYPE_VIDEO = Symbol()\nconst TYPE_IMAGE = Symbol()\n\nfunction handleFileResource(resource) {\n  switch(resource.type) {\n    case TYPE_AUDIO:\n      playAudio(resource)\n      break\n    case TYPE_VIDEO:\n      playVideo(resource)\n      break\n    case TYPE_IMAGE:\n      previewImage(resource)\n      break\n    default:\n      throw new Error('Unknown type of resource')\n  }\n}\n")])])]),a("h6",{attrs:{id:"_3-私有变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-私有变量"}},[n._v("#")]),n._v(" 3. 私有变量")]),n._v(" "),a("p",[n._v("Symbol 也可以用于私有变量的实现。\n// 例子 4-3")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("const Example = (function() {\n    var _private = Symbol('private');\n\n    class Example {\n        constructor() {\n          this[_private] = 'private';\n        }\n        getName() {\n          return this[_private];\n        }\n    }\n\n    return Example;\n})();\n\nvar ex = new Example();\n\nconsole.log(ex.getName()); // private\nconsole.log(ex.name); // undefined\n")])])]),a("h5",{attrs:{id:"_5-set-和-map"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-set-和-map"}},[n._v("#")]),n._v(" 5. Set 和 Map")]),n._v(" "),a("h6",{attrs:{id:"_1-数组去重"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-数组去重"}},[n._v("#")]),n._v(" 1. 数组去重")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("/ 例子 5-1\n[...new Set(array)]\n")])])]),a("h6",{attrs:{id:"_2-条件语句的优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-条件语句的优化"}},[n._v("#")]),n._v(" 2. 条件语句的优化")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("// 例子 5-2\n// 根据颜色找出对应的水果\n\n// bad\nfunction test(color) {\n  switch (color) {\n    case 'red':\n      return ['apple', 'strawberry'];\n    case 'yellow':\n      return ['banana', 'pineapple'];\n    case 'purple':\n      return ['grape', 'plum'];\n    default:\n      return [];\n  }\n}\n\ntest('yellow'); // ['banana', 'pineapple']\n\n// good\nconst fruitColor = {\n  red: ['apple', 'strawberry'],\n  yellow: ['banana', 'pineapple'],\n  purple: ['grape', 'plum']\n};\n\nfunction test(color) {\n  return fruitColor[color] || [];\n}\n\n// better\nconst fruitColor = new Map()\n  .set('red', ['apple', 'strawberry'])\n  .set('yellow', ['banana', 'pineapple'])\n  .set('purple', ['grape', 'plum']);\n\nfunction test(color) {\n  return fruitColor.get(color) || [];\n}\n")])])]),a("h5",{attrs:{id:"_6-for-of"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-for-of"}},[n._v("#")]),n._v(" 6. for of")]),n._v(" "),a("h6",{attrs:{id:"_1-遍历范围"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-遍历范围"}},[n._v("#")]),n._v(" 1. 遍历范围")]),n._v(" "),a("p",[n._v("for...of 循环可以使用的范围包括：")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("数组\nSet\nMap\n类数组对象，如 arguments 对象、DOM NodeList 对象\nGenerator 对象\n字符串\n")])])]),a("h6",{attrs:{id:"_2-优势"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-优势"}},[n._v("#")]),n._v(" 2. 优势")]),n._v(" "),a("p",[n._v("ES2015 引入了 for..of 循环，它结合了 forEach 的简洁性和中断循环的能力：")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("// 例子 6-1\n\nfor (const v of ['a', 'b', 'c']) {\n  console.log(v);\n}\n// a b c\n\nfor (const [i, v] of ['a', 'b', 'c'].entries()) {\n  console.log(i, v);\n}\n// 0 \"a\"\n// 1 \"b\"\n// 2 \"c\"\n")])])]),a("h6",{attrs:{id:"_3-遍历-map"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-遍历-map"}},[n._v("#")]),n._v(" 3. 遍历 Map")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("// 例子 6-2\n\nlet map = new Map(arr);\n\n// 遍历 key 值\nfor (let key of map.keys()) {\n  console.log(key);\n}\n\n// 遍历 value 值\nfor (let value of map.values()) {\n  console.log(value);\n}\n\n// 遍历 key 和 value 值(一)\nfor (let item of map.entries()) {\n  console.log(item[0], item[1]);\n}\n\n// 遍历 key 和 value 值(二)\nfor (let [key, value] of data) {\n  console.log(key)\n}\n")])])]),a("h5",{attrs:{id:"_7-promise"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-promise"}},[n._v("#")]),n._v(" 7. Promise")]),n._v(" "),a("h6",{attrs:{id:"_1-基本示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-基本示例"}},[n._v("#")]),n._v(" 1. 基本示例")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("// 例子 7-1\n\n// bad\nrequest(url, function(err, res, body) {\n    if (err) handleError(err);\n    fs.writeFile('1.txt', body, function(err) {\n        request(url2, function(err, res, body) {\n            if (err) handleError(err)\n        })\n    })\n});\n\n// good\nrequest(url)\n.then(function(result) {\n    return writeFileAsynv('1.txt', result)\n})\n.then(function(result) {\n    return request(url2)\n})\n.catch(function(e){\n    handleError(e)\n});\n")])])]),a("h6",{attrs:{id:"_2-finally"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-finally"}},[n._v("#")]),n._v(" 2. finally")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("// 例子 7-2\n\nfetch('file.json')\n.then(data => data.json())\n.catch(error => console.error(error))\n.finally(() => console.log('finished'));\n")])])]),a("h5",{attrs:{id:"_8-async"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-async"}},[n._v("#")]),n._v(" 8. Async")]),n._v(" "),a("h6",{attrs:{id:"_1-代码更加简洁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-代码更加简洁"}},[n._v("#")]),n._v(" 1. 代码更加简洁")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v('// 例子 8-1\n// good\nfunction fetch() {\n  return (\n    fetchData()\n    .then(() => {\n      return "done"\n    });\n  )\n}\n// better\nasync function fetch() {\n  await fetchData()\n  return "done"\n};\n\n// 例子 8-2\n// good\nfunction fetch() {\n  return fetchData()\n  .then(data => {\n    if (data.moreData) {\n        return fetchAnotherData(data)\n        .then(moreData => {\n          return moreData\n        })\n    } else {\n      return data\n    }\n  });\n}\n// better\nasync function fetch() {\n  const data = await fetchData()\n  if (data.moreData) {\n    const moreData = await fetchAnotherData(data);\n    return moreData\n  } else {\n    return data\n  }\n};\n\n// 例子 8-3\n// good\nfunction fetch() {\n  return (\n    fetchData()\n    .then(value1 => {\n      return fetchMoreData(value1)\n    })\n    .then(value2 => {\n      return fetchMoreData2(value2)\n    })\n  )\n}\n// better\nasync function fetch() {\n  const value1 = await fetchData()\n  const value2 = await fetchMoreData(value1)\n  return fetchMoreData2(value2)\n};\n')])])]),a("h6",{attrs:{id:"_2-错误处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-错误处理"}},[n._v("#")]),n._v(" 2. 错误处理")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("// 例子 8-4\n\n// good\nfunction fetch() {\n  try {\n    fetchData()\n      .then(result => {\n        const data = JSON.parse(result)\n      })\n      .catch((err) => {\n        console.log(err)\n      })\n  } catch (err) {\n    console.log(err)\n  }\n}\n\n// better\nasync function fetch() {\n  try {\n    const data = JSON.parse(await fetchData())\n  } catch (err) {\n    console.log(err)\n  }\n};\n")])])]),a("h6",{attrs:{id:"_3-async-地狱"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-async-地狱"}},[n._v("#")]),n._v(' 3. "async 地狱"')]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("// 例子 8-5\n// bad\n(async () => {\n  const getList = await getList();\n  const getAnotherList = await getAnotherList();\n})();\n// good\n(async () => {\n  const listPromise = getList();\n  const anotherListPromise = getAnotherList();\n  await listPromise;\n  await anotherListPromise;\n})();\n// good\n(async () => {\n  Promise.all([getList(), getAnotherList()]).then(...);\n})();\n")])])]),a("h5",{attrs:{id:"_9-class"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-class"}},[n._v("#")]),n._v(" 9. Class")]),n._v(" "),a("h6",{attrs:{id:"构造函数尽可能使用-class-的形式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构造函数尽可能使用-class-的形式"}},[n._v("#")]),n._v(" 构造函数尽可能使用 Class 的形式")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("// 例子 9-1\nclass Foo {\n  static bar () {\n    this.baz();\n  }\n  static baz () {\n    console.log('hello');\n  }\n  baz () {\n    console.log('world');\n  }\n}\nFoo.bar(); // hello\n")])])]),a("p",[n._v("// 例子 9-2\nclass Shape {\nconstructor(width, height) {\nthis._width = width;\nthis._height = height;\n}\nget area() {\nreturn this._width * this._height;\n}\n}\nconst square = new Shape(10, 10);\nconsole.log(square.area);    // 100\nconsole.log(square._width);  // 10")]),n._v(" "),a("h5",{attrs:{id:"_10-decorator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-decorator"}},[n._v("#")]),n._v(" 10.Decorator")]),n._v(" "),a("h6",{attrs:{id:"_1-log"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-log"}},[n._v("#")]),n._v(" 1. log")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("// 例子 10-1\n\nclass Math {\n  @log\n  add(a, b) {\n    return a + b;\n  }\n}\nlog 的实现可以参考 《ES6 系列之我们来聊聊装饰器》\n")])])]),a("h6",{attrs:{id:"_2-autobind"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-autobind"}},[n._v("#")]),n._v(" 2. autobind")]),n._v(" "),a("p",[n._v("// 例子 10-2")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("class Toggle extends React.Component {\n\n  @autobind\n  handleClick() {\n    console.log(this)\n  }\n\n  render() {\n    return (\n      <button onClick={this.handleClick}>\n        button\n      </button>\n    );\n  }\n}\n\nautobind 的实现可以参考 《ES6 系列之我们来聊聊装饰器》\n\n###### 3. debounce\n\n// 例子 10-3\n\nclass Toggle extends React.Component {\n\n  @debounce(500, true)\n  handleClick() {\n    console.log('toggle')\n  }\n\n  render() {\n    return (\n      <button onClick={this.handleClick}>\n        button\n      </button>\n    );\n  }\n}\n\ndebounce 的实现可以参考 《ES6 系列之我们来聊聊装饰器》\n")])])]),a("h6",{attrs:{id:"_4-react-与-redux"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-react-与-redux"}},[n._v("#")]),n._v(" 4. React 与 Redux")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("// 例子 10-4\n\n// good\nclass MyReactComponent extends React.Component {}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MyReactComponent);\n\n// better\n@connect(mapStateToProps, mapDispatchToProps)\nexport default class MyReactComponent extends React.Component {};\n\n##### 11. 函数\n###### 1. 默认值\n\n// 例子 11-1\n\n// bad\nfunction test(quantity) {\n  const q = quantity || 1;\n}\n\n// good\nfunction test(quantity = 1) {\n  ...\n}\n\n// 例子 11-2\n\ndoSomething({ foo: 'Hello', bar: 'Hey!', baz: 42 });\n\n// bad\nfunction doSomething(config) {\n  const foo = config.foo !== undefined ? config.foo : 'Hi';\n  const bar = config.bar !== undefined ? config.bar : 'Yo!';\n  const baz = config.baz !== undefined ? config.baz : 13;\n}\n\n// good\nfunction doSomething({ foo = 'Hi', bar = 'Yo!', baz = 13 }) {\n  ...\n}\n\n// better\nfunction doSomething({ foo = 'Hi', bar = 'Yo!', baz = 13 } = {}) {\n  ...\n}\n\n// 例子 11-3\n\n// bad\nconst Button = ({className}) => {\n  const classname = className || 'default-size';\n  return <span className={classname}></span>\n};\n\n// good\nconst Button = ({className = 'default-size'}) => (\n  <span className={classname}></span>\n);\n\n// better\nconst Button = ({className}) =>\n  <span className={className}></span>\n}\n\nButton.defaultProps = {\n  className: 'default-size'\n}\n\n// 例子 11-4\nconst required = () => {throw new Error('Missing parameter')};\nconst add = (a = required(), b = required()) => a + b;\nadd(1, 2) // 3\nadd(1); // Error: Missing parameter.\n\n##### 12. 拓展运算符\n###### 1. arguments 转数组\n\n// 例子 12-1\n\n// bad\nfunction sortNumbers() {\n  return Array.prototype.slice.call(arguments).sort();\n}\n\n// good\nconst sortNumbers = (...numbers) => numbers.sort();\n\n###### 2. 调用参数\n// 例子 12-2\n// bad\nMath.max.apply(null, [14, 3, 77])\n// good\nMath.max(...[14, 3, 77])\n// 等同于\nMath.max(14, 3, 77);\n\n##### 3. 构建对象\n\n剔除部分属性，将剩下的属性构建一个新的对象\n// 例子 12-3\nlet [a, b, ...arr] = [1, 2, 3, 4, 5];\nconst { a, b, ...others } = { a: 1, b: 2, c: 3, d: 4, e: 5 };\n")])])]),a("p",[n._v("有条件的构建对象")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("// 例子 12-4\n\n// bad\nfunction pick(data) {\n  const { id, name, age} = data\n\n  const res = { guid: id }\n\n  if (name) {\n    res.name = name\n  }\n  else if (age) {\n    res.age = age\n  }\n\n  return res\n}\n\n// good\nfunction pick({id, name, age}) {\n  return {\n    guid: id,\n    ...(name && {name}),\n    ...(age && {age})\n  }\n}\n")])])]),a("p",[n._v("合并对象")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("// 例子 12-5\n\nlet obj1 = { a: 1, b: 2,c: 3 }\nlet obj2 = { b: 4, c: 5, d: 6}\nlet merged = {...obj1, ...obj2};\n\n\n###### 4. React\n")])])]),a("p",[n._v("将对象全部传入组件")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("// 例子 12-6\nconst parmas =  {value1: 1, value2: 2, value3: 3}\n<Test {...parmas} />\n\n##### 13. 双冒号运算符\n\n// 例子 13-1\n\nfoo::bar;\n// 等同于\nbar.bind(foo);\n\nfoo::bar(...arguments);\n// 等同于\nbar.apply(foo, arguments);\n")])])]),a("p",[n._v("如果双冒号左边为空，右边是一个对象的方法，则等于将该方法绑定在该对象上面。")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("// 例子 13-2\n\nvar method = obj::obj.foo;\n// 等同于\nvar method = ::obj.foo;\n\nlet log = ::console.log;\n// 等同于\nvar log = console.log.bind(console);\n")])])]),a("h5",{attrs:{id:"_14-解构赋值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_14-解构赋值"}},[n._v("#")]),n._v(" 14. 解构赋值")]),n._v(" "),a("h6",{attrs:{id:"_1-对象的基本解构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-对象的基本解构"}},[n._v("#")]),n._v(" 1. 对象的基本解构")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v('// 例子 14-1\ncomponentWillReceiveProps(newProps) {\n  this.setState({\n    active: newProps.active\n  })\n}\ncomponentWillReceiveProps({active}) {\n  this.setState({active})\n}\n\n// 例子 14-2\n// bad\nhandleEvent = () => {\n  this.setState({\n    data: this.state.data.set("key", "value")\n  })\n};\n// good\nhandleEvent = () => {\n  this.setState(({data}) => ({\n    data: data.set("key", "value")\n  }))\n};\n\n// 例子 14-3\nPromise.all([Promise.resolve(1), Promise.resolve(2)])\n.then(([x, y]) => {\n    console.log(x, y);\n});\n')])])]),a("h5",{attrs:{id:"_2-对象深度解构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-对象深度解构"}},[n._v("#")]),n._v(" 2. 对象深度解构")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("// 例子 14-4\n\n// bad\nfunction test(fruit) {\n  if (fruit && fruit.name)  {\n    console.log (fruit.name);\n  } else {\n    console.log('unknown');\n  }\n}\n\n// good\nfunction test({name} = {}) {\n  console.log (name || 'unknown');\n}\n\n// 例子 14-5\n\nlet obj = {\n    a: {\n      b: {\n        c: 1\n      }\n    }\n};\n\nconst {a: {b: {c = ''} = ''} = ''} = obj;\n")])])]),a("h5",{attrs:{id:"_3-数组解构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-数组解构"}},[n._v("#")]),n._v(" 3. 数组解构")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("// 例子 14-6\n\n// bad\nconst splitLocale = locale.split(\"-\");\nconst language = splitLocale[0];\nconst country = splitLocale[1];\n\n// good\nconst [language, country] = locale.split('-');\n")])])]),a("h5",{attrs:{id:"_4-变量重命名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-变量重命名"}},[n._v("#")]),n._v(" 4. 变量重命名")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("// 例子 14-8\n\nlet { foo: baz } = { foo: 'aaa', bar: 'bbb' };\nconsole.log(baz); // \"aaa\"\n")])])]),a("h5",{attrs:{id:"_5-仅获取部分属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-仅获取部分属性"}},[n._v("#")]),n._v(" 5. 仅获取部分属性")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("// 例子 14-9\n\nfunction test(input) {\n  return [left, right, top, bottom];\n}\nconst [left, __, top] = test(input);\n\nfunction test(input) {\n  return { left, right, top, bottom };\n}\nconst { left, right } = test(input);\n")])])]),a("h4",{attrs:{id:"_15-增强的对象字面量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_15-增强的对象字面量"}},[n._v("#")]),n._v(" 15. 增强的对象字面量")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("// 例子 15-1\n// bad\nconst something = 'y'\nconst x = {\n  something: something\n}\n// good\nconst something = 'y'\nconst x = {\n  something\n};\n")])])]),a("p",[n._v("动态属性")]),n._v(" "),a("p",[n._v("// 例子 15-2\nconst x = {\n['a' + '_' + 'b']: 'z'\n}\nconsole.log(x.a_b); // z")]),n._v(" "),a("h5",{attrs:{id:"_16-数组的拓展方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_16-数组的拓展方法"}},[n._v("#")]),n._v(" 16. 数组的拓展方法")]),n._v(" "),a("h6",{attrs:{id:"_1-keys"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-keys"}},[n._v("#")]),n._v(" 1. keys")]),n._v(" "),a("p",[n._v("// 例子 16-1")]),n._v(" "),a("p",[n._v('var arr = ["a", , "c"];')]),n._v(" "),a("p",[n._v("var sparseKeys = Object.keys(arr);\nconsole.log(sparseKeys); // ['0', '2']")]),n._v(" "),a("p",[n._v("var denseKeys = [...arr.keys()];\nconsole.log(denseKeys);  // [0, 1, 2]")]),n._v(" "),a("h6",{attrs:{id:"_2-entries"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-entries"}},[n._v("#")]),n._v(" 2. entries")]),n._v(" "),a("p",[n._v("// 例子 16-2")]),n._v(" "),a("p",[n._v('var arr = ["a", "b", "c"];\nvar iterator = arr.entries();')]),n._v(" "),a("p",[n._v("for (let e of iterator) {\nconsole.log(e);\n}")]),n._v(" "),a("h6",{attrs:{id:"_3-values"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-values"}},[n._v("#")]),n._v(" 3. values")]),n._v(" "),a("p",[n._v("// 例子 16-3")]),n._v(" "),a("p",[n._v("let arr = ['w', 'y', 'k', 'o', 'p'];\nlet eArr = arr.values();")]),n._v(" "),a("p",[n._v("for (let letter of eArr) {\nconsole.log(letter);\n}")]),n._v(" "),a("h6",{attrs:{id:"_4-includes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-includes"}},[n._v("#")]),n._v(" 4. includes")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("// 例子 16-4\n\n// bad\nfunction test(fruit) {\n  if (fruit == 'apple' || fruit == 'strawberry') {\n    console.log('red');\n  }\n}\n\n// good\nfunction test(fruit) {\n  const redFruits = ['apple', 'strawberry', 'cherry', 'cranberries'];\n  if (redFruits.includes(fruit)) {\n    console.log('red');\n  }\n}\n")])])]),a("h6",{attrs:{id:"_5-find"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-find"}},[n._v("#")]),n._v(" 5. find")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("// 例子 16-5\n\nvar inventory = [\n    {name: 'apples', quantity: 2},\n    {name: 'bananas', quantity: 0},\n    {name: 'cherries', quantity: 5}\n];\n\nfunction findCherries(fruit) {\n    return fruit.name === 'cherries';\n}\n\nconsole.log(inventory.find(findCherries)); // { name: 'cherries', quantity: 5 }\n")])])]),a("h6",{attrs:{id:"_6-findindex"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-findindex"}},[n._v("#")]),n._v(" 6. findIndex")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("// 例子 16-6\n\nfunction isPrime(element, index, array) {\n  var start = 2;\n  while (start <= Math.sqrt(element)) {\n    if (element % start++ < 1) {\n      return false;\n    }\n  }\n  return element > 1;\n}\n\nconsole.log([4, 6, 8, 12].findIndex(isPrime)); // -1, not found\nconsole.log([4, 6, 7, 12].findIndex(isPrime)); // 2\n")])])]),a("p",[n._v("更多的就不列举了。")]),n._v(" "),a("h5",{attrs:{id:"_17-optional-chaining"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_17-optional-chaining"}},[n._v("#")]),n._v(" 17. optional-chaining")]),n._v(" "),a("p",[n._v("举个例子：")]),n._v(" "),a("p",[n._v("// 例子 17-1")]),n._v(" "),a("p",[n._v("const obj = {\nfoo: {\nbar: {\nbaz: 42,\n},\n},\n};")]),n._v(" "),a("p",[n._v("const baz = obj?.foo?.bar?.baz; // 42")]),n._v(" "),a("p",[n._v("同样支持函数：")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("// 例子 17-2\n\nfunction test() {\n  return 42;\n}\ntest?.(); // 42\n\nexists?.(); // undefined\n")])])]),a("p",[n._v("需要添加 @babel/plugin-proposal-optional-chaining 插件支持")]),n._v(" "),a("h5",{attrs:{id:"_18-logical-assignment-operators"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_18-logical-assignment-operators"}},[n._v("#")]),n._v(" 18. logical-assignment-operators")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("// 例子 18-1\n\na ||= b;\n\nobj.a.b ||= c;\n\na &&= b;\n\nobj.a.b &&= c;\n")])])]),a("p",[n._v("Babel 编译为：")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("var _obj$a, _obj$a2;\n\na || (a = b);\n\n(_obj$a = obj.a).b || (_obj$a.b = c);\n\na && (a = b);\n\n(_obj$a2 = obj.a).b && (_obj$a2.b = c);\n")])])]),a("p",[n._v("出现的原因：")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("// 例子 18-2\n\nfunction example(a = b) {\n  // a 必须是 undefined\n  if (!a) {\n    a = b;\n  }\n}\n\nfunction numeric(a = b) {\n  // a 必须是 null 或者 undefined\n  if (a == null) {\n    a = b;\n  }\n}\n\n// a 可以是任何 falsy 的值\nfunction example(a = b) {\n  // 可以，但是一定会触发 setter\n  a = a || b;\n\n  // 不会触发 setter，但可能会导致 lint error\n  a || (a = b);\n\n  // 就有人提出了这种写法：\n  a ||= b;\n}\n")])])]),a("p",[n._v("需要 @babel/plugin-proposal-logical-assignment-operators 插件支持")]),n._v(" "),a("h5",{attrs:{id:"_19-nullish-coalescing-operator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_19-nullish-coalescing-operator"}},[n._v("#")]),n._v(" 19. nullish-coalescing-operator")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v('a ?? b\n\n// 相当于\n\n(a !== null && a !== void 0) ? a : b\n\n举个例子：\n\nvar foo = object.foo ?? "default";\n\n// 相当于\n\nvar foo = (object.foo != null) ? object.foo : "default";\n')])])]),a("p",[n._v("需要 @babel/plugin-proposal-nullish-coalescing-operator 插件支持")]),n._v(" "),a("h5",{attrs:{id:"_20-pipeline-operator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_20-pipeline-operator"}},[n._v("#")]),n._v(" 20. pipeline-operator")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("const double = (n) => n * 2;\nconst increment = (n) => n + 1;\n\n// 没有用管道操作符\ndouble(increment(double(5))); // 22\n\n// 用上管道操作符之后\n5 |> double |> increment |> double; // 22")])])])])}),[],!1,null,null,null);a.default=s.exports}}]);