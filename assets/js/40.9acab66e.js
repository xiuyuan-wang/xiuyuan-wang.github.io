(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{352:function(n,e,s){"use strict";s.r(e);var t=s(14),o=Object(t.a)({},(function(){var n=this,e=n._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("p",[n._v("什么是js 宏任务和微任务?\n")]),n._v(" "),e("h4",{attrs:{id:"简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[n._v("#")]),n._v(" 简介")]),n._v(" "),e("p",[n._v("1、js是一门单线程语言 浏览器是多线程的")]),n._v(" "),e("p",[n._v("2、同步进入主线程")]),n._v(" "),e("p",[n._v("3、异步进入Event Table并注册函数，当指定的事情完成时，Event Table会将这个函数移入到Event Queue中，主线程任务执行完毕之后 会去Event Queue读取相应的函数 上面这个过程会不断的重复，也就是Event Loop(事件循环)")]),n._v(" "),e("p",[n._v("事件循环:scrip是一个宏观任务 宏观任务结束之后 才会去执行下一个宏观任务,其中如果有微观任务会去执行所有的微观任务，执行完毕所有的微观任务之后，执行下一个宏观任务")]),n._v(" "),e("h5",{attrs:{id:"宏观任务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#宏观任务"}},[n._v("#")]),n._v(" 宏观任务")]),n._v(" "),e("p",[n._v("macro-task(宏任务)：包括整体代码script，setTimeout，setInterval")]),n._v(" "),e("h5",{attrs:{id:"微观任务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#微观任务"}},[n._v("#")]),n._v(" 微观任务")]),n._v(" "),e("p",[n._v("micro-task(微任务)：Promise 、async await，process.nextTick(process.nextTick()的意思就是定义出一个动作，并且让这个动作在下一个事件轮询的时间点上执行)")]),n._v(" "),e("h4",{attrs:{id:"例1"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#例1"}},[n._v("#")]),n._v(" 例1:")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("console.log('1');\n\nsetTimeout(function() {\n    console.log('2');\n    process.nextTick(function() {\n        console.log('3');\n    })\n    new Promise(function(resolve) {\n        console.log('4');\n        resolve();\n    }).then(function() {\n        console.log('5')\n    })\n})\nprocess.nextTick(function() {\n    console.log('6');\n})\nnew Promise(function(resolve) {\n    console.log('7');\n    resolve();\n}).then(function() {\n    console.log('8')\n})\n\nsetTimeout(function() {\n    console.log('9');\n    process.nextTick(function() {\n        console.log('10');\n    })\n    new Promise(function(resolve) {\n        console.log('11');\n        resolve();\n    }).then(function() {\n        console.log('12')\n    })\n})\n")])])]),e("h5",{attrs:{id:"第一个宏观任务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第一个宏观任务"}},[n._v("#")]),n._v(" 第一个宏观任务:")]),n._v(" "),e("p",[n._v("1.第一个宏观任务script 作为整体进入主线程 遇到console.log('1') 输出1"),e("br"),e("br"),n._v("\n2.遇到setTimeout,宏观任务（现在第一个宏观任务script还没有执行完毕 会分配到宏观任务中 暂时还不会执行）"),e("br"),e("br"),n._v("\n3.遇到下面的process.nextTick 分配到微观任务中"),e("br"),e("br"),n._v("\n4.遇到Promise，new Promise直接执行，输出7。then被分发到微任务Event Queue中 5.此时的微观任务表中：process.nextTick，Promise.then 则执行结果为 6 8"),e("br"),e("br"),n._v("\n第一个宏观任务 执行结果 : 1 7 6 8")]),n._v(" "),e("h5",{attrs:{id:"第二个宏观任务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第二个宏观任务"}},[n._v("#")]),n._v(" 第二个宏观任务:")]),n._v(" "),e("p",[n._v("1.第二个宏观任务是第一个setTimeout"),e("br"),e("br"),n._v("\n2.跟script的执行顺序是一样的 碰到console.log('2') 执行2 process.nextTick会分配到微观任务 Promise会立即执行 然后.then分配到微观任务"),e("br"),e("br"),n._v("\n输出结果：2 4 3 5")]),n._v(" "),e("h5",{attrs:{id:"第三个宏观任务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第三个宏观任务"}},[n._v("#")]),n._v(" 第三个宏观任务:")]),n._v(" "),e("p",[n._v("第三个宏观任务就是第二个setTimeout 和第二个宏观任务执行顺序一样")]),n._v(" "),e("p",[n._v("输出结果 9 11 10 12")]),n._v(" "),e("h4",{attrs:{id:"例2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#例2"}},[n._v("#")]),n._v(" 例2")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("// 宏观任务  setTimeout \n// 微观任务    async1 .then .then\n\n    console.log('script start')//1\n    async function async1() { //async 语法糖 async2()执行完毕 才执行下面 会加入在微观任务里面\n        await async2()\n        console.log('async1 end') //5\n    }\n    async function async2() {\n        console.log('async2 end') //2\n    }\n    async1()\n\n    setTimeout(function () {\n        console.log('setTimeout') // 8\n    }, 0)\n\n    new Promise(resolve => {\n        console.log('promise') //3\n        resolve()\n    }).then(function () {  //这个then 和下边那个then 都是微任务\n        console.log('promise1') //6\n    }).then(function () {\n        console.log('promise2') //7\n    })\n\n    console.log('script end') //4\n")])])])])}),[],!1,null,null,null);e.default=o.exports}}]);