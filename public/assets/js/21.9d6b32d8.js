(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{470:function(t,e,n){"use strict";n.r(e);var s=n(2),a=Object(s.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("p",[t._v("vuex的state，actions，getters，mutations的使用 分为两种情况，有module和没有mudule")]),t._v(" "),n("p",[t._v("##有module\n###看getters，有四种写法")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v('\t<template>\n\t  <div>\n\t    <button @click="getUserName()">\n\t      点击获取用户名\n\t    </button>\n\t    <div>获取到的用户名：'+t._s(t.userName)+"</div>\n\t  </div>\n\t</template>\n\t \n\t<script>\n\t  import {mapGetters} from 'vuex'\n\t \n\t  export default {\n\t    name: \"login\",\n\t    data: function () {\n\t      return {\n\t        userName: '',\n\t      }\n\t    },\n\t    methods:{\n\t      getUserName:function(){\n\t        /**\n\t         *  调用getters有四种方法\n\t         *  第一种：this.userName = this.gettersName ，需要在computed中写...mapGetters\n\t         *  第二种：this.userName = this['gettersName'] ，需要在computed中写...mapGetters\n\t         *  第三种：this.userName = this.$store.getters.gettersName，直接调用getters.js中的gettersName方法，不需要mapGetters\n\t         *  第四种：this.userName = this.$store.getters['gettersName']，直接调用getters.js中的gettersName方法，不需要mapGetters\n\t         */\n\t        console.log('没有module的getters：'+JSON.stringify(this.$store.getters))//{\"gettersName\":\"111\"}\n\t        this.userName = this.$store.getters['gettersName']\n\t      }\n\t    },\n\t    computed: {\n\t      ...mapGetters([\n\t        'gettersName'\n\t      ])\n\t    },\n\t  }\n\t<\/script>\n\t \n\t<style scoped>\n\t \n\t</style>\n")])])]),n("p",[t._v("###actions有三种写法：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v('<template>\n  <div>\n    <input type="number" v-model="userName" placeholder="请输入用户名" />\n    <div @click=\'loginClick()\'> 登录</div>\n    <div>'+t._s(t.test)+"</div>\n  </div>\n</template>\n \n<script>\n  import { mapActions } from 'vuex'\n  export default {\n    name: \"login\",\n    data:function () {\n      return{\n        userName:'',\n      }\n    },\n    methods:{\n      ...mapActions([\n        'setActionName'\n      ]),\n \n      loginClick:function () {\n        /**\n         *  调用actions有三种方法\n         *  第一种：this.setActionName(this.userName)，需要在methods中写...mapActions\n         *  第二种：this['setActionName'](this.userName)，需要在methods中写...mapActions\n         *  第三种：this.$store.dispatch('setActionName',this.userName)，直接调用actions.js中的setActionName方法，不需要mapActions\n         */\n        this.$store.dispatch('setActionName',this.userName)\n      },\n    },\n    computed:{\n      test(){\n        return this.$store.state.name;\n      }\n    }\n  }\n<\/script>\n \n<style scoped>\n \n</style>\n")])])]),n("p",[t._v("###mutations有一种写法：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v('<template>\n  <div>\n    <input type="number" v-model="userName" placeholder="请输入用户名" />\n    <button @click=\'loginClick()\'> 登录</button>\n    <div>'+t._s(t.test)+"</div>\n  </div>\n</template>\n \n<script>\n  export default {\n    name: \"login\",\n    data:function () {\n      return{\n        userName:'',\n      }\n    },\n    methods:{\n      loginClick:function () {\n        /**\n         *  调用mutations有一种方法\n         *   this.$store.commit('setMutationName',this.userName)\n         */\n        this.$store.commit('setMutationName',this.userName)\n      },\n    },\n    computed:{\n      test(){\n        return this.$store.state.name;\n      }\n    }\n \n  }\n<\/script>\n \n<style scoped>\n \n</style>\n")])])]),n("p",[t._v("##state有四种写法：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("<template>\n  <div>\n    <button @click='loginClick()'> 获取用户名</button>\n    <div>获取到的用户名："+t._s(t.userName)+"</div>\n  </div>\n</template>\n \n<script>\n  import { mapState } from 'vuex'\n  export default {\n    name: \"login\",\n    data:function () {\n      return{\n        userName:'',\n      }\n    },\n    methods:{\n      loginClick:function () {\n        /**\n         *  调用state有四种方法\n         *  第一种：this.userName = this.$store.state.name,不需要...mapstate\n         *  第二种：this.userName = this.$store.state['name'],不需要...mapstate\n         *  第三种：this.userName = this.getName，需要...mapstate\n         *  第四种：this.userName = this['getName']，需要...mapstate\n         */\n        console.log('没有module的state：'+JSON.stringify(this.$store.state))//{\"name\":\"111\"}\n        this.userName = this['getName']\n      },\n    },\n    computed:{\n      ...mapState({\n        getName: state => state.name,\n      }),\n    }\n  }\n<\/script>\n \n<style scoped>\n \n</style>\n")])])]),n("p",[t._v("##再来看看有module的情况：")]),t._v(" "),n("p",[t._v("###接下来看看有module时getters的使用：getters有两种使用方法")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v('<template>\n  <div>\n    <button @click="getUserName()">\n      点击获取用户名\n    </button>\n    <div>获取到的用户名：'+t._s(t.userName)+"</div>\n  </div>\n</template>\n \n<script>\n  import {mapGetters} from 'vuex'\n \n  export default {\n    name: \"login\",\n    data: function () {\n      return {\n        userName: '',\n      }\n    },\n    methods:{\n      getUserName:function(){\n        /**\n         *  调用getters有两种方法\n         *  第一种：this.userName = this['mod1/getUserName'] ，需要在computed中写...mapGetters\n         *  第二种：this.userName = this.$store.getters['mod1/getUserName']，直接调用gettersOne.js中的mod1的getUserName方法，不需要mapGetters\n         */\n        console.log('有module的getters：'+JSON.stringify(this.$store.getters))//{\"getAddress\":\"西安市\",\"mod1/getUserName\":\"testName\",\"mod1/getUserNameTest\":\"testName\"}\n        this.userName = this.$store.getters['mod1/getUserName'];\n      }\n    },\n    computed: {\n      ...mapGetters([\n        'mod1/getUserName'\n      ])\n    },\n  }\n<\/script>\n \n<style scoped>\n \n</style>\n")])])]),n("p",[t._v("###有module的state：state有四种使用方法")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("<template>\n  <div>\n    <button @click='loginClick()'> 获取用户名</button>\n    <div>获取到的用户名："+t._s(t.userName)+'</div>\n  </div>\n</template>\n \n<script>\n  import { mapState } from \'vuex\'\n  export default {\n    name: "login",\n    data:function () {\n      return{\n        userName:\'\',\n      }\n    },\n    methods:{\n      loginClick:function () {\n        /**\n         *  调用state有四种方法\n         *  第一种：this.userName = this.$store.state.mod1.userName,不需要...mapstate\n         *  第二种：this.userName = this.$store.state.mod1[\'userName\'],不需要...mapstate\n         *  第三种：this.userName = this.getName，需要...mapstate\n         *  第四种：this.userName = this[\'getName\']，需要...mapstate\n         */\n        console.log(\'===\'+ JSON.stringify(this.$store.state))//{"address":"西安市","mod1":{"userName":"testName"}}\n        this.userName = this.getName\n      },\n    },\n    computed:{\n      ...mapState({\n        /**\n         * 下面的方法也可以写为\n         *  getName: function(state){\n              console.log(JSON.stringify(state))//{"address":"西安市","mod1":{"userName":"testName"}}\n              return  state.mod1.userName\n           }\n         * @param state\n         * @returns {*}\n         */\n        getName: state =>state.mod1.userName//或者getName: state =>state.mod1[\'userName\']\n      }),\n    }\n  }\n<\/script>\n \n<style scoped>\n \n</style>\n')])])]),n("p",[t._v("###有module的actions：action有两种使用方法")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v('<template>\n  <div>\n    <input type="number" v-model="userName" placeholder="请输入用户名" />\n    <div @click=\'loginClick()\'> 登录</div>\n    <div>'+t._s(t.test)+"</div>\n  </div>\n</template>\n \n<script>\n  import { mapActions } from 'vuex'\n  export default {\n    name: \"login\",\n    data:function () {\n      return{\n        userName:'',\n      }\n    },\n    methods:{\n      ...mapActions([\n        'mod1/changeName'\n      ]),\n \n      loginClick:function () {\n        /**\n         *  调用actions有两种方法\n         *  第一种：this['mod1/changeName'](this.userName)，需要在methods中写...mapActions\n         *  第二种：this.$store.dispatch('mod1/changeName',this.userName)，直接调用actions.js中的changeName方法，不需要mapActions\n         */\n        this['mod1/changeName'](this.userName)\n      },\n    },\n    computed:{\n      test(){\n        return this.$store.state.mod1.userName;\n      }\n    }\n  }\n<\/script>\n \n<style scoped>\n \n</style>\n")])])]),n("p",[t._v("###有module的mutations：mutations有一种使用方法")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v('<template>\n  <div>\n    <input type="number" v-model="userName" placeholder="请输入用户名" />\n    <button @click=\'loginClick()\'> 登录</button>\n    <div>'+t._s(t.test)+"</div>\n  </div>\n</template>\n \n<script>\n  export default {\n    name: \"login\",\n    data:function () {\n      return{\n        userName:'',\n      }\n    },\n    methods:{\n      loginClick:function () {\n        /**\n         *  调用mutations有一种方法\n         *   this.$store.commit('setName',this.userName)\n         */\n        this.$store.commit('mod1/setName',this.userName)\n      },\n    },\n    computed:{\n      test(){\n        return this.$store.state.mod1.userName;\n      }\n    }\n \n  }\n<\/script>\n \n<style scoped>\n \n</style>")])])])])}),[],!1,null,null,null);e.default=a.exports}}]);