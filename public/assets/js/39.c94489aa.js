(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{489:function(t,a,r){"use strict";r.r(a);var s=r(2),v=Object(s.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("p",[t._v("排序\n")]),t._v(" "),r("h4",{attrs:{id:"时间复杂度"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度"}},[t._v("#")]),t._v(" 时间复杂度")]),t._v(" "),r("p",[t._v("一个算法的时间复杂度反映了程序运行从开始到结束所需要的时间。把算法中基本操作重复执行的次数（频度）作为算法的时间复杂度。")]),t._v(" "),r("p",[t._v("没有循环语句，记作O(1)，也称为常数阶。只有一重循环，则算法的基本操作的执行频度与问题规模n呈线性增大关系，记作O（n），也叫线性阶。")]),t._v(" "),r("p",[t._v("常见的时间复杂度有：")]),t._v(" "),r("p",[t._v("O(1): Constant Complexity: Constant 常数复杂度\nO(log n): Logarithmic Complexity: 对数复杂度\nO(n): Linear Complexity: 线性时间复杂度\nO(n^2): N square Complexity 平⽅方\nO(n^3): N square Complexity ⽴立⽅方\nO(2^n): Exponential Growth 指数\nO(n!): Factorial 阶乘")]),t._v(" "),r("p",[r("img",{attrs:{src:"/images/blog/20190510/1.webp",alt:""}})]),t._v(" "),r("h4",{attrs:{id:"空间复杂度"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#空间复杂度"}},[t._v("#")]),t._v(" 空间复杂度")]),t._v(" "),r("p",[t._v("一个程序的空间复杂度是指运行完一个程序所需内存的大小。利用程序的空间复杂度，可以对程序的运行所需要的内存多少有个预先估计。")]),t._v(" "),r("p",[t._v("一个程序执行时除了需要存储空间和存储本身所使用的指令、常数、变量和输入数据外，还需要一些对数据进行操作的工作单元和存储一些为现实计算所需信息的辅助空间。")]),t._v(" "),r("p",[t._v("排序或许是前端接触最多的算法了，很多人的算法之路是从一个冒泡排序开始的，排序的方法有非常多中，它们各自有各自的应用场景和优缺点，这里我推荐如下6种应用最多的排序方法，如果你有兴趣也可以研究下其他几种。")]),t._v(" "),r("h5",{attrs:{id:"快速排序"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#快速排序"}},[t._v("#")]),t._v(" 快速排序")]),t._v(" "),r("p",[t._v("选择一个目标值，比目标值小的放左边，比目标值大的放右边，目标值的位置已排好，将左右两侧再进行快排。")]),t._v(" "),r("h5",{attrs:{id:"归并排序"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#归并排序"}},[t._v("#")]),t._v(" 归并排序")]),t._v(" "),r("p",[t._v("将大序列二分成小序列，将小序列排序后再将排序后的小序列归并成大序列。")]),t._v(" "),r("h5",{attrs:{id:"选择排序"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#选择排序"}},[t._v("#")]),t._v(" 选择排序")]),t._v(" "),r("p",[t._v("每次排序取一个最大或最小的数字放到前面的有序序列中。")]),t._v(" "),r("h5",{attrs:{id:"插入排序"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#插入排序"}},[t._v("#")]),t._v(" 插入排序")]),t._v(" "),r("p",[t._v("将左侧序列看成一个有序序列，每次将一个数字插入该有序序列。插入时，从有序序列最右侧开始比较，若比较的数较大，后移一位。")]),t._v(" "),r("h5",{attrs:{id:"冒泡排序"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#冒泡排序"}},[t._v("#")]),t._v(" 冒泡排序")]),t._v(" "),r("p",[t._v("循环数组，比较当前元素和下一个元素，如果当前元素比下一个元素大，向上冒泡。下一次循环继续上面的操作，不循环已经排序好的数。")]),t._v(" "),r("h5",{attrs:{id:"堆排序"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#堆排序"}},[t._v("#")]),t._v(" 堆排序")]),t._v(" "),r("p",[t._v("创建一个大顶堆，大顶堆的堆顶一定是最大的元素。交换第一个元素和最后一个元素，让剩余的元素继续调整为大顶堆。从后往前以此和第一个元素交换并重新构建，排序完成。")])])}),[],!1,null,null,null);a.default=v.exports}}]);